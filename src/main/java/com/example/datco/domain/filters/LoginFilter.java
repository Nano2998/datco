package com.example.datco.domain.filters;import com.example.datco.common.JwtUtils;import com.example.datco.domain.dto.CustomUserDetails;import com.example.datco.domain.dto.UserRequest;import com.fasterxml.jackson.databind.ObjectMapper;import jakarta.servlet.FilterChain;import jakarta.servlet.ServletException;import jakarta.servlet.http.Cookie;import jakarta.servlet.http.HttpServletRequest;import jakarta.servlet.http.HttpServletResponse;import lombok.RequiredArgsConstructor;import org.springframework.http.HttpStatus;import org.springframework.security.authentication.AuthenticationManager;import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;import org.springframework.security.core.Authentication;import org.springframework.security.core.AuthenticationException;import org.springframework.security.core.context.SecurityContextHolder;import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;import java.io.IOException;@RequiredArgsConstructorpublic class LoginFilter extends UsernamePasswordAuthenticationFilter {    private final JwtUtils jwtUtil;    private final AuthenticationManager authenticationManager;    private final ObjectMapper objectMapper;    @Override    public Authentication attemptAuthentication(HttpServletRequest request, HttpServletResponse response) throws AuthenticationException {        try {            UserRequest userRequest = objectMapper.readValue(request.getInputStream(), UserRequest.class);            UsernamePasswordAuthenticationToken token = new UsernamePasswordAuthenticationToken(userRequest.email(), userRequest.password());            return authenticationManager.authenticate(token);        } catch (IOException e) {            throw new RuntimeException("Request body를 읽을 수 없습니다.", e);        }    }    @Override    protected void successfulAuthentication(HttpServletRequest request, HttpServletResponse response, FilterChain chain, Authentication authResult) throws IOException, ServletException {        CustomUserDetails customUserDetails = (CustomUserDetails) authResult.getPrincipal();        System.out.println("로그인 성공");        String accessToken = jwtUtil.makeJwtToken(customUserDetails.getUser().getId());        String refreshToken = jwtUtil.makeRefreshToken(customUserDetails.getUser().getId());        response.addHeader("Authorization","Bearer " + accessToken);        response.addCookie(makeCookie(refreshToken));        response.setStatus(HttpStatus.OK.value());    }    @Override    protected void unsuccessfulAuthentication(HttpServletRequest request, HttpServletResponse response, AuthenticationException failed) throws IOException, ServletException {        SecurityContextHolder.getContextHolderStrategy().clearContext();        response.setContentType("application/json");        response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);        response.getWriter().write("{\"message\": \"" + failed.getMessage() + "\"}");    }    private Cookie makeCookie(String token) {        Cookie cookie = new Cookie("token", token);        cookie.setMaxAge(60 * 60 * 24);        cookie.setSecure(true);        return cookie;    }}